"""practica 1.3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1__U-dQ5LO4s_vrHy9jkHUE80sN8UdGC9

Obtengan el conjunto de datos de Iris
"""

from google.colab import drive
drive.mount('/content/drive')

"""Leemos el archivo de Iris"""

#importar datos

import pandas as pd
iris_data = pd.read_csv('/content/drive/MyDrive/iris.csv')
iris_data.head(10)

"""Prueben con seis puntos, seleccionen de forma aleatoria dos puntos de cada clase"""

from Minkowski import distancia_minkowski

"""Seleccionamos los puntos de forma aleatoriamente

Se hizo uso de sample para que pudieramos obtener los dos puntos de cada especie
"""

iris_data.sample(n = 4)

iris_data.sample(n = 4)

"""En un nuevo dataframe añadimos los datos sin especies"""

df = iris_data.drop('variety', axis=1)

"""Los valores escogidos son los ID 15, 31, 100, 58, 134, 109
Creamos un nuevo dataframe con solo esas columnas
"""

from pandas.core.generic import FillnaOptions
import pandas as pd
# Selecionar las filas se copean
FilaS= [15, 30, 99, 57, 133, 108]
# Copiar las filas seleccionadas desde df a un nuevo DataFrame
valoresE = df.loc[FilaS].copy()
print(valoresE)

from itertools import combinations
p = 3
distancias = []

for i, j in combinations(range(len(valoresE)), 2):
    d_minkowski = distancia_minkowski(valoresE.iloc[i], valoresE.iloc[j], p=3)
    distancias.append(d_minkowski)

print(distancias)

from distancia_maha import mahalanobis

distanciasM = []

# Recorre todos los puntos seleccionados
for i in range(len(valoresE)):
    punto_i = valoresE.iloc[i].values

    # Recorre todos los puntos en el conjunto de datos
    for j in range(len(valoresE)):
        if j != i:
            punto_j = valoresE.iloc[j].values
            distancia_maha = mahalanobis(punto_i, valoresE.values)
            distanciasM.append(distancia_maha)

print(distanciasM)

#Distancias ordenadas Minkowski
distancias.sort()
print(distancias)
#Distancias ordenadas Mahalanobis
distanciasM.sort()
print(distanciasM)

#Elementos K = 5 Minkowski
print(distancias[:5])
print('La distancia mas corta con la funcion de Minkowski es',distancias[0])
#Elementos K = 5 Mahalanobis
print(distanciasM[:5])
print('La distancia mas corta con la funcion de Mahalanobis es',distanciasM[0])

"""Chequen la clase de cada uno de esos elementos seleccionados y por votación decidan qué clase tiene el punto evaluado"""

import pandas as pd
import numpy as pd
#nuevo df para guardar solo los datos númericos de la base de datos iris
w = iris_data
prueba = w[[ 'sepal.length', 'sepal.width', 'petal.length', 'petal.width']].copy()
#se convierte en vectores numpy para que esten juntos todos los datos tipo: [0.1 1.32 4.5 6.8]
datas = prueba.to_numpy()
#print(datas)
x = datas #x guarda los datos númericos
y = w['variety'] #y guarda las clases

#print(distancias[:5])
print('La distancia mas corta con la funcion de Minkowski es',distancias[0])
#Elementos K = 5 Mahalanobis
#print(distanciasM[:5])
print('La distancia mas corta con la funcion de Mahalanobis es',distanciasM[0])

#K=5
indices = np.argsort(distancias[0])[:5]
clases = y[indices]
conteo = {}
for clase in clases:
    if clase in conteo:
        conteo[clase] += 1
    else:
        conteo[clase] = 1

# Encontramos la clase con más votos
Clase = max(conteo, key=conteo.get)

print(f'La clase asignada por votación mayoritaria con la distancia Minkowski es: {Clase}')

indices = np.argsort(distanciasM[0])[:5]
clases = y[indices]
conteo = {}
for clase in clases:
    if clase in conteo:
        conteo[clase] += 1
    else:
        conteo[clase] = 1

# Encontramos la clase con más votos
Clase = max(conteo, key=conteo.get)
print(f'La clase asignada por votación mayoritaria con la distancia Mahalanobis es: {Clase}')